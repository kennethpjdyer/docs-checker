#! /usr/bin/env python3

#######################################
# docs-checker.py - Script takes two arguments, --source and
#    and --stock, each of which is a directory.  It then compares
#    the file listings in the directories and subdirectories to make
#    sure that tha they match.  If they match, it gives a count.  If
#    any files don't match, it lists the filenames and the modtimes
#    on the source and stock directories.  If any files are present
#    in the source directory, but absent from teh stock directory,
#    it lists these in a separate list.
#       The purpose of this script is to identify current files for
#    transfer from a working directory (source) into a staging
#    directory (stock) -- where it can be managed and uplaoded to
#    Github.
#       Note: The listing function excludes temporary files and files 
#   generated by the autosave functionality in Emacs.  It identifies
#   such files as either ending in '~' or beginning with '#'.
#
# Author: Kenneth P. J. Dyer
#
# Version 0.1
#
# Date: September 19, 2014 
#
########################################




#####################
# Imports
import argparse
import os
import filecmp
import datetime
import time

#####################
# Argument Parser

parser = argparse.ArgumentParser()
parser.add_argument('--source', dest='source', type=str)
parser.add_argument('--stock', dest='stock',type=str)
args = parser.parse_args()



####################
# Directory Variables

path_current = os.curdir

def path_converter(directory):
    if directory[0] != "/":
        directory = path_current + "/" + directory
    return directory

path_source = path_converter(args.source)
path_stock = path_converter(args.stock)

def pathfinder(directory, filename):
    return directory + filename


###################
# List Cleaner
def list_cleaner (filelist):
    clean = []
    for i in filelist:
        if i[-1] == "~":
            pass
        elif i[0] == "#":
            pass
        else:
            clean.append(i)
    return clean

####################
# Directory Reader
def dir_reader(directory, filelist):
    newlist = []
    for i in filelist:
        dirlist = []
        path = pathfinder(directory,i)
        if os.path.isdir(path):
            dirlist = list_cleaner(os.listdir(path))
            for j in dirlist:
                newlist.append(i + "/" + j)
        else:
            newlist.append(i)
    return newlist



####################
# Directory Listing
def list_handler(directory):
    filelist = os.listdir(directory)
    filelist = list_cleaner(filelist)
    filelist =dir_reader(directory, filelist)

    return filelist

####################
# Find Cell Size
def cell_sizer(filelist):
    length = 0
    for i in filelist:
        if len(i) > length:
            length = len(i)
    return length

####################
# Get Modtimes

def time_handler(path):
    clock = time.gmtime(path)
    return time.strftime("%Y-%m-%d %H:%M:%S", clock)

def file_handler(filename):

    source = time_handler(os.stat(path_source + filename).st_mtime)
    stock = time_handler(os.stat(path_stock + filename).st_mtime)

    return [source, stock]

####################
# Report Maker
def report_maker(common, comparison):
    name_size = cell_sizer(common)
    match = comparison[0]
    mismatch = comparison[1]
    error = comparison[2]

    general = "[" + str(datetime.datetime.now())[0:16] + "]\n"

    match_entry = "\tMatching Files: " + str(len(match)) + "\n"
    mismatch_entry = "\tMismatching Files: " + str(len(mismatch)) + "\n"
    error_entry = "\tUnmatched Files: " + str(len(error)) + "\n\n"
    overview = "Overview \n" + match_entry + mismatch_entry + error_entry
    date_size = 0


    mismatch_entry = ""
    for i in mismatch:
        modtime = file_handler(i)
        date_len = len(str(modtime[0]))
        date_size = date_len + 2
        name_entry = " | " + i + " " * (name_size - (len(i)+1))
        source_entry = "| " + str(modtime[0]) + " "
        stock_entry = "| " + str(modtime[1]) + " |\n"
        mismatch_entry = mismatch_entry + name_entry + source_entry + stock_entry
    
    headings = [" Filename", " Source", " Stock"]
    headings[0] = " |" + headings[0] + " " * (name_size - len(headings[0]))
    headings[1] = "|"  + headings[1] + " " * (date_size - len(headings[1]))
    headings[2] = "|"  + headings[2] + " " * (date_size - len(headings[2])) + "|\n"
    header = headings[0] + headings[1] + headings[2]

    breaker = " +" + "-" * name_size + ("+" + "-" * date_size) * 2  + "+\n"
    length = len(breaker)

    error_entry = "Uncopied Files:\n"
    for i in error:
        error_entry = error_entry + i + "\n"
    
    


    gen_report = general + overview
    mismatch_report = "Mismatched Files:\n" + breaker + header + breaker + mismatch_entry + breaker


    report = gen_report + mismatch_report + error_entry
    return report


#####################
# Main Function
def main ():
    source_list = list_handler(path_source)
    comparison = filecmp.cmpfiles(path_source, path_stock, source_list)
    report = report_maker(source_list, comparison)


    print(report)


#####################
# Execute
main()
